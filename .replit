# Configuration settings for Python 3.9 development environment on Replit
run = "python3.9 main.py"
language = "python3"

# Hidden files and directories
hidden = [".env", ".git", "**/__pycache__","**/.mypy_cache","**/*.pyc"]

# Entry-point for the project
entrypoint = "main.py"

# Environment variables
[env]
SECRET_KEY = "Your Updated Secret Key Here"

# Packages to be installed
[scripts]
install_packages = '''
# Adding pip functionality
import pip
# List of packages to be installed
packages = ["django", "gunicorn", "dj-database-url", "whitenoise", "python-dotenv"]
# Iterate over the list and install them one by one
for package in packages:
    pip.main(['install', package])

# Create "fix_nix_error.sh"
with open("fix_nix_error.sh", "w") as f:
  f.write(
    """#!/bin/bash
    # Fix Nix error by adding 'nodejs-16.20.0' to permittedInsecurePackages
    # Check if the config file exists
    if [ -f ~/.config/nixpkgs/config.nix ]; then
        # Check if 'nodejs-16.20.0' is already in permittedInsecurePackages
        if ! grep -q "nodejs-16.20.0" ~/.config/nixpkgs/config.nix; then
            # Add 'nodejs-16.20.0' to permittedInsecurePackages
            echo 'nixpkgs.config.permittedInsecurePackages = [ "nodejs-16.20.0" ];' >> ~/.config/nixpkgs/config.nix
            echo "Added 'nodejs-16.20.0' to permittedInsecurePackages in ~/.config/nixpkgs/config.nix"
        else
            echo "'nodejs-16.20.0' is already in permittedInsecurePackages"
        fi
    else
        # Create the config file with 'nodejs-16.20.0' in permittedInsecurePackages
        echo '{ permittedInsecurePackages = [ "nodejs-16.20.0" ]; }' > ~/.config/nixpkgs/config.nix
        echo "Created ~/.config/nixpkgs/config.nix with 'nodejs-16.20.0' in permittedInsecurePackages"
    fi"""
  )

import os
os.system("chmod +x fix_nix_error.sh")
'''

# Function to install the packages and execute the "fix_nix_error.sh" script
run = "python3.9 -c 'from .replit import install_packages; install_packages()'; ./fix_nix_error.sh"

# Updated Unit Test Settings
[unitTest]
language = "python3"

# Updated Debugger Settings
[debugger]
support = true

# Updated GitHub Import Settings
[gitHubImport]
requiredFiles = ["README.md", "LICENSE", "requirements.txt", ".env"]

# Language Specification
[languages.python3]
pattern = "**/*.py"
languageServer = { command = "pylsp"}