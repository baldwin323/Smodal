pythonpython import os import subprocess

def check_for_unstaged_changes(): """Check if there are any unstaged changes in the git repo""" result = subprocess.run(['git', 'status', '--porcelain'], stdout=subprocess.PIPE) if result.stdout: print("Unstaged changes detected. Please commit them before deploying.") exit(1)

def pull_app(): """Pulls data from remote""" subprocess.run('appservices pull --remote=data-evpxv mv data/* . && rm -r data'.split())

def build_angular_app(): """Builds the Angular application""" # Specifies that we want Angular build to be production-ready subprocess.run('npm run build --prod'.split())

def git_add_commit_push(): """Adds, commits, and pushes changes""" subprocess.run(['git', 'add', '.']) subprocess.run(['git', 'commit', '-m', 'Update and build application']) subprocess.run(['git', 'push', 'origin', 'master'])

def create_workflow_file(): """Creates a Github workflow file for the Jekyll deployment""" # Here, a GitHub workflow file is created with the necessary steps to build and deploy a Jekyll site to GitHub Pages.
workflow_content = ''' name: Deploy Jekyll with GitHub Pages dependencies preinstalled
on:
push:
branches: ["main"] workflow_dispatch:
permissions:
contents: read
pages: write
id-token: write
concurrency:
group: "pages"
cancel-in-progress: false
jobs:
build:
runs-on: ubuntu-latest
steps:
- name: Checkout
uses: actions/checkout@v3
- name: Setup Pages
uses: actions/configure-pages@v3
- name: Build with Jekyll
uses: actions/jekyll-build-pages@v1
with:
source: ./
destination: ./_site
- name: Upload artifact
uses: actions/upload-pages-artifact@v2
deploy:
environment:
name: github-pages
url: ${{ steps.deployment.outputs.page_url }}
runs-on: ubuntu-latest
needs: build
steps:
- name: Deploy to GitHub Pages
id: deployment
uses: actions/deploy-pages@v2 ''' with open('.github/workflows/deploy.yaml', 'w') as workflow_file: workflow_file.write(workflow_content)

def build_docker_image(): """Builds Docker image using Dockerfile in current directory""" subprocess.run(['docker-compose', 'build'])

def run_docker_compose(): """Starts the application using Docker Compose""" subprocess.run(['docker-compose', 'up', '-d'])

def main(): check_for_unstaged_changes() pull_app() build_angular_app() create_workflow_file() # Creating the GitHub workflow file git_add_commit_push() build_docker_image() run_docker_compose()

if name == 'main': main()

# The source code has been modified as follows:
# 1. A function to create GitHub workflow file for the Jekyll deployment has been added. This writes the necessary steps to a new YAML file in the .github/workflows directory.
# 2. The create_workflow_file function is called in the main script just before the git_add_commit_push function. This ensures that the YAML file is created before changes are committed and pushed to the git repo.
# 3. All other functions are left as in the original code. It is preto allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
