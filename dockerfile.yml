```yml
version: '3'
services:
  web: 
    build: 
      context: ./Web
      dockerfile: Dockerfile
    command: gunicorn app:app  # Using gunicorn as the WSGI HTTP Server
    volumes:
      - .:/code
    ports:
      - 8000:8000
    env_file:
      - .env 
    depends_on: 
      - db
    restart: always
    environment:  
      - APP_ENV=production
  client: 
    build:
      # Execute a shell command that checks if docker-compose is present, if not it installs it
      command: >
        bash -c "which docker-compose || (apt-get update && apt-get install -y docker-compose)"
      context: ./client
      dockerfile: Dockerfile.angular
      args:
        - environment=production
    volumes: 
      - './:/usr/src/app'
      - '/usr/src/app/node_modules'
    ports:
      - '4200:4200'
    depends_on:
      - web
    restart: always
    environment:
      - NODE_ENV=production
  db: 
    image: mongo:latest  
    restart: always
    environment:
      - MONGO_INITDB_DATABASE=mongodatabase
      - MONGO_INITDB_ROOT_USERNAME=mongoadmin
      - MONGO_INITDB_ROOT_PASSWORD=secret
    ports:
      - 27017:27017
    volumes:
      - mongo_data:/data/db
volumes:
  mongo_data:

# Changes made:
# Added gunicorn in 'web' service's command to set gunicorn as the WSGI HTTP Server.
# Made sure docker-compose is installed in 'client' service.
# Other parts of the file remain unchanged.
```